{"version":3,"sources":["components/Header.js","components/ErrorMessage.js","components/PostContainer.js","components/ParagraphText.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["StyledHeader","styled","header","StyledHeadingOne","h1","StyledHeadingTwo","h2","Header","StyledErrorMessage","div","ErrorMessage","children","role","StyledUnorderedList","ul","StyledListItem","li","StyledPostContainer","StyledImage","img","StyledHeading","h3","PostContainer","propState","setPropState","useState","pageCount","setPageCount","data","setData","loadMoreData","setLoadMoreData","errorMessage","setErrorMessage","useEffect","fetchData","window","addEventListener","debounce","loadMorePosts","innerHeight","scrollY","document","body","offsetHeight","axios","method","url","then","response","catch","map","post","key","id","src","cover_image","social_image","alt","title","StyledParagraph","p","StyledParagraphWrapper","ParagraphText","props","StyledMain","main","Main","doPostsExist","setDoPostsExist","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0xBAGA,IAAMA,EAAeC,UAAOC,OAAV,KAIZC,EAAmBF,UAAOG,GAAV,KAQhBC,EAAmBJ,UAAOK,GAAV,KAmBPC,EATA,WACX,OACI,kBAACP,EAAD,KACI,kBAACG,EAAD,yBACA,kBAACE,EAAD,2C,mfC1BZ,IAAMG,EAAqBP,UAAOQ,IAAV,KAkBTC,EANM,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,OACI,kBAACH,EAAD,CAAoBI,KAAK,SAAQ,2BAAID,K,mrCCX7C,IAAME,EAAsBZ,UAAOa,GAAV,KAanBC,EAAiBd,UAAOe,GAAV,KAcdC,EAAsBhB,UAAOQ,IAAV,KAOnBS,EAAcjB,UAAOkB,IAAV,KAOXC,EAAgBnB,UAAOoB,GAAV,KAoFJC,EA1EO,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAAkB,EACfC,mBAAS,GADM,mBAC1CC,EAD0C,KAC/BC,EAD+B,OAEzBF,mBAAS,IAFgB,mBAE1CG,EAF0C,KAEpCC,EAFoC,OAGTJ,oBAAS,GAHA,mBAG1CK,EAH0C,KAG5BC,EAH4B,OAITN,mBAAS,IAJA,mBAI1CO,EAJ0C,KAI5BC,EAJ4B,KAMjDC,qBAAU,WACNC,EAAUT,KACX,CAACI,IAEJI,qBAAU,WACND,EAAgB,MACjB,CAACL,IAEJM,qBAAU,WACNE,OAAOC,iBAAiB,SAAUC,IAASC,EAAe,MAAM,MAIpE,IAAMA,EAAgB,WACdH,OAAOI,YAAcJ,OAAOK,SAAWC,SAASC,KAAKC,cACrDb,GAAiBD,IAInBK,EAAY,SAACT,GACfmB,IAAM,CACFC,OAAQ,MACRC,IAAI,oCAAD,OAAsCrB,KAC1CsB,MAAK,SAAAC,GAIJpB,EAAQ,GAAD,mBAAKD,GAAL,YAAcqB,EAASrB,QAE9BD,EAAaD,EAAY,GAEpBH,GACDC,GAAa,MAElB0B,OAAM,WAEAtB,GACDK,EAAgB,qEAK5B,OACI,oCAEQD,EAEA,kBAAC,EAAD,KAAeA,GAEf,kBAACnB,EAAD,KAEQe,EAAKuB,KAAI,SAAAC,GACL,OACI,kBAACrC,EAAD,CAAgBsC,IAAKD,EAAKE,IACtB,kBAACpC,EAAD,CAAaqC,IAAKH,EAAKI,aAAeJ,EAAKK,aAAcC,IAAI,KAC7D,kBAACzC,EAAD,KACI,kBAACG,EAAD,KAAgBgC,EAAKO,e,opBCpH7D,IAAMC,EAAkB3D,UAAO4D,EAAV,KAgBfC,EAAyB7D,UAAOQ,IAAV,KAkBbsD,EARO,SAACC,GACnB,OACI,kBAACF,EAAD,KACI,kBAACF,EAAD,KAAkBI,EAAMrD,Y,kMC1BpC,IAAMsD,EAAahE,UAAOiE,KAAV,KAuBDC,EAfF,WAAO,IAAD,EACyB1C,oBAAS,GADlC,mBACR2C,EADQ,KACMC,EADN,KAGf,OACI,oCACI,kBAAC,QAAD,MACA,kBAACJ,EAAD,KACI,kBAAC,EAAD,CAAe1C,UAAW6C,EAAc5C,aAAc6C,IAEpDD,EAAe,kBAAC,EAAD,mBAA4C,QCV9DE,EATH,WACR,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIQC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASmC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.1606fabc.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledHeader = styled.header`\n    margin: 50px 0 20px;\n    text-align: center;\n`\nconst StyledHeadingOne = styled.h1`\n    color: #272c2f;\n    font-family: 'FuturaBT-Heavy', sans-serif;\n    font-size: 45px;\n    font-weight: 100;\n    line-height: 1.1;    \n`\n\nconst StyledHeadingTwo = styled.h2`\n    font-family: 'FuturaBT-Heavy', sans-serif;\n    font-size: 30px;\n    font-weight: 100;\n    letter-spacing: 2px;\n    line-height: 45px;\n    opacity: .5;\n    margin: 15px 0 0;\n`\n\nconst Header = () => {\n    return (\n        <StyledHeader>\n            <StyledHeadingOne>DevTO Blog Clone</StyledHeadingOne>\n            <StyledHeadingTwo>Stories from the DevTO Community</StyledHeadingTwo>\n        </StyledHeader>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledErrorMessage = styled.div`\n    background: #FFF6F6;\n    border-radius: 5px;\n    box-shadow: 0 0 0 1px #AA92A0 inset, 0 0 0 0 transparent;\n    color: #9f3a38;\n    padding: 10px 20px;\n    max-width: 250px;\n    margin: 30px auto 0;\n    text-align: center;\n    transition: opacity 500ms ease, color 500ms ease, background-color 500ms ease, box-shadow 500ms ease, -webkit-box-shadow 500ms ease;\n`\n\nconst ErrorMessage = ({children}) => {\n    return (\n        <StyledErrorMessage role=\"alert\"><p>{children}</p></StyledErrorMessage>\n    )\n}\n\nexport default ErrorMessage;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport debounce from 'lodash/debounce';\nimport ErrorMessage from './ErrorMessage';\n\nconst StyledUnorderedList = styled.ul`\n    height: auto;\n    list-style: none;\n    position: relative;\n    margin: 40px auto 0;\n    width: 100%;\n    &::after {\n        clear: both;\n        content: \"\";\n        display: table;\n    }\n`\n\nconst StyledListItem = styled.li`\n    background: #f2efeb;\n    float: left;\n    margin: 0 0 20px 0;\n    position: relative;\n    @media (max-width: 625px) {\n        width: 100%;\n    }\n    @media (min-width: 626px) {\n        margin: 20px;\n        width: calc(50% - 40px);\n    }\n`\n\nconst StyledPostContainer = styled.div`\n    background: #fff;\n    clear: both;\n    line-height: 28px;\n    padding: 30px 30px 15px;\n`\n\nconst StyledImage = styled.img`\n    display: block;\n    height: 165px;\n    object-fit: cover;\n    width: 100%;\n    max-width: 100%;\n`\nconst StyledHeading = styled.h3`\n    font-family: 'FuturaBT-Heavy', sans-serif;\n    font-weight: 100;\n    font-size: 24px;\n    height: 100px;\n    letter-spacing: -.03em;\n    line-height: 32px;\n    margin: 10px 0 20px;\n`\n\nconst PostContainer = ({propState, setPropState}) => {\n    const [pageCount, setPageCount] = useState(1);\n    const [data, setData] = useState([]);\n    const [loadMoreData, setLoadMoreData] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        fetchData(pageCount);\n    }, [loadMoreData]);\n\n    useEffect(() => {\n        setErrorMessage('');\n    }, [data]);\n    \n    useEffect(() => {\n        window.addEventListener('scroll', debounce(loadMorePosts, 500), true);\n    });\n    \n    // when user reaches bottom of the page, the loadMoreData value updates and API call fetches next 30 posts\n    const loadMorePosts = () => {\n        if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n            setLoadMoreData(!loadMoreData);\n        }\n    };\n\n    const fetchData = (pageCount) => {\n        axios({\n            method: 'get',\n            url: `https://dev.to/api/articles?page=${pageCount}`,\n        }).then(response => {\n            /*\n            If API call is successful, spread current data array and spread response data from current API call to keep previous API call results and add new response data\n            */\n            setData([...data, ...response.data]);\n            // increase the page count by 1, so the next API call gets the next 30 results\n            setPageCount(pageCount + 1);\n            // set state in parent component if its value is false, so the \"more posts\" text is visible\n            if (!propState) {\n                setPropState(true);\n            }\n        }).catch(() => {\n            // if there are no API call results, show error message to user\n            if (!data) {\n                setErrorMessage('Posts are not available at this time. Please try again later.')\n            }\n        });\n    };\n\n    return (\n        <>\n            {\n                errorMessage\n            ?\n                <ErrorMessage>{errorMessage}</ErrorMessage>\n            :\n                <StyledUnorderedList>\n                    {\n                        data.map(post => {\n                            return (\n                                <StyledListItem key={post.id}>\n                                    <StyledImage src={post.cover_image || post.social_image} alt=\"\" />\n                                    <StyledPostContainer>\n                                        <StyledHeading>{post.title}</StyledHeading>\n                                    </StyledPostContainer>\n                                </StyledListItem>\n                            )\n                        })\n                    }\n                </StyledUnorderedList>\n            }\n        </>\n    );\n}\n\nexport default PostContainer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledParagraph = styled.p`\n    background: #ffb21a;\n    border-radius: 5px;\n    bottom: 0;\n    color: #4c4c4c;\n    font-family: FuturaBT-Book,sans-serif;\n    font-size: 20px;\n    font-weight: 300;\n    left: 50%;\n    margin-left: -90px;\n    position: absolute;\n    padding: 16px 20px 15px;\n    text-align: center;\n    width: 180px;\n`\n\nconst StyledParagraphWrapper = styled.div`\n    background: linear-gradient(hsla(0,0%,100%,0), #f9f8f6);\n    height: 390px;\n    margin-top: -400px;\n    pointer-events: none;\n    position: relative;\n    text-align: center;\n    z-index: 2;\n`\n\nconst ParagraphText = (props) => {\n    return (\n        <StyledParagraphWrapper>\n            <StyledParagraph>{props.children}</StyledParagraph>\n        </StyledParagraphWrapper>\n    )\n}\n\nexport default ParagraphText;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Reset } from 'styled-reset';\nimport PostContainer from './PostContainer';\nimport ParagraphText from './ParagraphText';\n\nconst StyledMain = styled.main`\n    background: #f9f8f6;\n    min-height: 100vh;\n    margin: 0 auto;\n    max-width: 1260px;\n    padding: 0 20px 120px;\n`\n\nconst Main = () => {    \n    const [doPostsExist, setDoPostsExist] = useState(false);\n\n    return (\n        <>\n            <Reset />\n            <StyledMain>\n                <PostContainer propState={doPostsExist} setPropState={setDoPostsExist} />\n                {/* if blog articles exist, show 'more posts' text */}\n                { doPostsExist ? <ParagraphText>More Posts</ParagraphText> : null }\n            </StyledMain>\n        </>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\n\nconst App = () => {\n    return (\n        <>\n            <Header />\n            <Main />\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}